app.py:
import os
from flask import Flask, render_template, request, redirect, url_for, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from dotenv import load_dotenv

# --- IA (Gemini) ---
import google.generativeai as genai

# ---------- Config base ----------
load_dotenv()  # Carga GEMINI_API_KEY desde .env

app = Flask(__name__, template_folder='templates', static_folder='static')

# BaseDir absoluto para que SQLite se cree en D:\comuni-ia-flask\comuni_ia.db
BASEDIR = os.path.abspath(os.path.dirname(__file__))
DB_PATH = os.path.join(BASEDIR, 'comuni_ia.db')

# SQLite (prioridad actual)
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{DB_PATH}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JSON_AS_ASCII'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# ---------- Modelos ----------
class Business(db.Model):
    __tablename__ = 'businesses'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(160), nullable=False)
    description = db.Column(db.Text, nullable=False)
    logo = db.Column(db.String(500), nullable=True)
    location = db.Column(db.String(160), nullable=False, default="Santa Cruz, Bolivia")

    # relaciones (opcionales si luego creas reviews/products)
    reviews = db.relationship('Review', backref='business', lazy=True, cascade="all, delete-orphan")
    products = db.relationship('Product', backref='business', lazy=True, cascade="all, delete-orphan")

class Review(db.Model):
    __tablename__ = 'reviews'
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey('businesses.id'), nullable=False)
    author = db.Column(db.String(120), nullable=False)
    rating = db.Column(db.Integer, nullable=False)  # 1..5
    comment = db.Column(db.Text, nullable=False)

class Product(db.Model):
    __tablename__ = 'products'
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey('businesses.id'), nullable=False)
    name = db.Column(db.String(160), nullable=False)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(500), nullable=True)

# ---------- Inicialización DB ----------
with app.app_context():
    db.create_all()

# ---------- Config Gemini ----------
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    # Modelo razonable para texto; si usas otro, cámbialo aquí
    GEMINI_MODEL = genai.GenerativeModel("gemini-2.5-flash")
else:
    GEMINI_MODEL = None

# ---------- Rutas ----------
@app.route('/', strict_slashes=False)
def home():
    # Trae algunos negocios para destacarlos en index
    businesses = Business.query.order_by(Business.id.desc()).limit(6).all()
    return render_template('index.html', businesses=businesses)

@app.route('/register', methods=['GET', 'POST'], strict_slashes=False)
def register():
    if request.method == 'POST':
        name = request.form.get('name', '').strip()
        description = request.form.get('description', '').strip()
        logo = request.form.get('logo', '').strip()
        location = request.form.get('location', 'Santa Cruz, Bolivia').strip() or "Santa Cruz, Bolivia"

        if not name or not description:
            # simple validación
            return render_template('register.html', error="Nombre y descripción son obligatorios.", form=request.form)

        business = Business(name=name, description=description, logo=logo, location=location)
        db.session.add(business)
        db.session.commit()

        return redirect(url_for('profile', id=business.id))

    # GET
    return render_template('register.html')

@app.route('/profile/<int:id>', strict_slashes=False)
def profile(id):
    business = Business.query.get_or_404(id)
    # Podrías traer reviews/products si quieres mostrarlos
    return render_template('profile.html', business=business)

# IA: sugerencias de marketing por negocio
@app.route('/api/ai/suggestions/<int:id>', methods=['GET'], strict_slashes=False)
def ai_suggestions(id):
    business = Business.query.get_or_404(id)
    if not GEMINI_MODEL:
        return jsonify({"error": "Gemini no configurado. Define GEMINI_API_KEY en .env"}), 500

    prompt = (
        "Eres un asistente de marketing para emprendimientos locales de Santa Cruz, Bolivia. "
        "Genera 5 sugerencias prácticas y accionables (títulos y bullets) para mejorar la visibilidad y ventas "
        f"del negocio:\n\nNombre: {business.name}\nDescripción: {business.description}\nUbicación: {business.location}\n\n"
        "Formato:\n- Título breve\n- 2 a 3 bullets con acciones concretas (menciona redes locales, hashtags, alianzas, ferias/mercados cruceños)."
    )
    try:
        resp = GEMINI_MODEL.generate_content(prompt)
        text = resp.text.strip() if hasattr(resp, "text") else "No hay respuesta."
        return jsonify({"business_id": business.id, "suggestions": text})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# IA: chatbot general para Comuni IA
@app.route('/api/chat', methods=['POST'], strict_slashes=False)
def chat():
    if not GEMINI_MODEL:
        return jsonify({"error": "Gemini no configurado. Define GEMINI_API_KEY en .env"}), 500

    data = request.get_json(silent=True) or {}
    user_msg = (data.get('message') or "").strip()
    if not user_msg:
        return jsonify({"error": "Falta 'message'"}), 400

    system_context = (
        "Eres el chatbot de Comuni IA. Responde con mensajes útiles y breves sobre marketing, visibilidad, "
        "buenas prácticas de perfil, uso de etiquetas locales (#SantaCruzBolivia, #EmprendimientoCruceño), "
        "participación en ferias locales (ex. Feria Barrio, Cambódromo), y cómo usar la plataforma Comuni IA. "
        "Evita temas fuera de este alcance."
    )

    try:
        resp = GEMINI_MODEL.generate_content(f"{system_context}\n\nUsuario: {user_msg}\nAsistente:")
        text = resp.text.strip() if hasattr(resp, "text") else "No tengo una respuesta en este momento."
        return jsonify({"reply": text})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ---------- Manejadores de errores útiles ----------
@app.errorhandler(404)
def not_found(e):
    return render_template('index.html', error_404=True), 404

@app.errorhandler(500)
def server_error(e):
    return jsonify({"error": "Error interno del servidor"}), 500

# ---------- Entry ----------
if __name__ == '__main__':
    # host='0.0.0.0' si quieres exponer en LAN
    app.run(debug=True)

templates:
index.html:
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Comuni IA — Emprendimientos de Santa Cruz</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="{{ url_for('static', filename='css/styles.css') }}" rel="stylesheet"/>
  <script src="https://kit.fontawesome.com/a2e0e6ad3c.js" crossorigin="anonymous"></script>
</head>
<body>
<nav class="navbar navbar-expand-lg bg-light">
  <div class="container">
    <a class="navbar-brand fw-bold" href="{{ url_for('home') }}">Comuni IA</a>
    <div class="collapse navbar-collapse">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item"><a href="#sobre" class="nav-link">Sobre Nosotros</a></li>
        <li class="nav-item"><a href="{{ url_for('register') }}" class="nav-link">Registrarse</a></li>
      </ul>
    </div>
  </div>
</nav>

<header class="py-5 bg-body-tertiary">
  <div class="container text-center">
    <h1 class="display-5 fw-bold">Apoyamos emprendimientos locales en Santa Cruz</h1>
    <p class="lead">Descubre, conecta y crece con Comuni IA</p>
  </div>
</header>

<section class="py-4">
  <div class="container">
    <form class="row g-3">
      <div class="col-md-6">
        <input class="form-control" type="text" placeholder="Busca un emprendimiento o producto...">
      </div>
      <div class="col-md-3">
        <select class="form-select">
          <option selected>Todas las categorías</option>
          <option>Gastronomía</option>
          <option>Ropa</option>
          <option>Servicios</option>
        </select>
      </div>
      <div class="col-md-3">
        <input class="form-control" type="text" value="Santa Cruz, Bolivia" disabled>
      </div>
    </form>
  </div>
</section>

<section class="py-5">
  <div class="container">
    <h2 class="h4 mb-4">Emprendimientos destacados</h2>
    <div class="row g-3">
      {% for b in businesses %}
      <div class="col-md-4">
        <div class="card h-100">
          {% if b.logo %}
          <img src="{{ b.logo }}" class="card-img-top" alt="{{ b.name }}" onerror="this.style.display='none'">
          {% endif %}
          <div class="card-body">
            <h5 class="card-title">{{ b.name }}</h5>
            <p class="card-text text-truncate">{{ b.description }}</p>
            <a class="btn btn-primary" href="{{ url_for('profile', id=b.id) }}">Ver perfil</a>
          </div>
        </div>
      </div>
      {% else %}
      <p class="text-muted">Aún no hay registros. ¡Sé el primero en <a href="{{ url_for('register') }}">registrar tu negocio</a>!</p>
      {% endfor %}
    </div>
  </div>
</section>

<section id="sobre" class="py-5 bg-light">
  <div class="container">
    <h2 class="h4">Sobre Nosotros</h2>
    <p>Comuni IA conecta a emprendedores con su comunidad, usando IA para impulsar su visibilidad y crecimiento.</p>
  </div>
</section>

<footer class="py-4 border-top">
  <div class="container d-flex justify-content-between">
    <small>© {{ 2025 }} Comuni IA</small>
    <div class="d-flex gap-3">
      <a href="#"><i class="fa-brands fa-facebook"></i></a>
      <a href="#"><i class="fa-brands fa-instagram"></i></a>
      <a href="#"><i class="fa-brands fa-x-twitter"></i></a>
    </div>
  </div>
</footer>

<!-- Chatbot floating -->
<button id="chatbot-toggle" class="chatbot-btn"><i class="fa-solid fa-comments"></i></button>
<div id="chatbot-panel" class="chatbot-panel">
  <div class="chatbot-header">Comuni IA — Chat</div>
  <div id="chatbot-messages" class="chatbot-messages"></div>
  <div class="chatbot-input">
    <input id="chatbot-text" type="text" class="form-control" placeholder="Escribe tu pregunta..."/>
    <button id="chatbot-send" class="btn btn-primary">Enviar</button>
  </div>
</div>

<script src="{{ url_for('static', filename='js/chatbot.js') }}"></script>
</body>
</html>

profile.html:
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>{{ business.name }} — Comuni IA</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="{{ url_for('static', filename='css/styles.css') }}" rel="stylesheet"/>
</head>
<body>
<header class="bg-body-tertiary">
  <div class="container py-4 d-flex gap-3 align-items-center">
    {% if business.logo %}
    <img src="{{ business.logo }}" alt="{{ business.name }}" style="width:80px;height:80px;object-fit:cover;border-radius:12px" onerror="this.style.display='none'">
    {% endif %}
    <div>
      <h1 class="h3 mb-1">{{ business.name }}</h1>
      <p class="mb-0">{{ business.description }}</p>
      <small class="text-muted"><i class="bi bi-geo"></i> {{ business.location }}</small>
    </div>
  </div>
</header>

<main class="container py-4">
  <div class="row g-4">
    <div class="col-md-8">
      <h2 class="h5 mb-3">Galería</h2>
      <div class="row g-2">
        <!-- Placeholders -->
        <div class="col-6"><div class="ratio ratio-16x9 bg-light border rounded"></div></div>
        <div class="col-6"><div class="ratio ratio-16x9 bg-light border rounded"></div></div>
      </div>

      <h2 class="h5 mt-4">Mapa</h2>
      <div class="ratio ratio-16x9">
        <iframe
          src="https://www.google.com/maps?q=Santa+Cruz+Bolivia&output=embed"
          style="border:0" loading="lazy"></iframe>
      </div>

      <h2 class="h5 mt-4">Reseñas</h2>
      <p class="text-muted">Próximamente…</p>
    </div>

    <div class="col-md-4">
      <h2 class="h5 mb-3">Métricas</h2>
      <div class="p-3 border rounded bg-light">Gráficos próximamente…</div>

      <h2 class="h5 mt-4 d-flex align-items-center justify-content-between">
        Sugerencias de IA
        <button id="btn-ai" class="btn btn-sm btn-outline-primary">Generar</button>
      </h2>
      <pre id="ai-box" class="p-3 border rounded bg-light small" style="white-space:pre-wrap">—</pre>
    </div>
  </div>
</main>

<footer class="py-4 border-top">
  <div class="container d-flex justify-content-between">
    <small>© {{ 2025 }} Comuni IA</small>
    <a class="btn btn-outline-secondary btn-sm" href="{{ url_for('home') }}">Volver al inicio</a>
  </div>
</footer>

<!-- Chatbot -->
<button id="chatbot-toggle" class="chatbot-btn">💬</button>
<div id="chatbot-panel" class="chatbot-panel">
  <div class="chatbot-header">Comuni IA — Chat</div>
  <div id="chatbot-messages" class="chatbot-messages"></div>
  <div class="chatbot-input">
    <input id="chatbot-text" type="text" class="form-control" placeholder="Escribe tu pregunta..."/>
    <button id="chatbot-send" class="btn btn-primary">Enviar</button>
  </div>
</div>

<script>
document.getElementById('btn-ai')?.addEventListener('click', async () => {
  const box = document.getElementById('ai-box');
  box.textContent = 'Generando…';
  try {
    const resp = await fetch('{{ url_for("ai_suggestions", id=business.id) }}');
    const data = await resp.json();
    box.textContent = data.suggestions || data.error || 'Sin datos.';
  } catch (e) {
    box.textContent = 'Error llamando a IA.';
  }
});
</script>
<script src="{{ url_for('static', filename='js/chatbot.js') }}"></script>
</body>
</html>

register.html:
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Registrar negocio — Comuni IA</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="{{ url_for('static', filename='css/styles.css') }}" rel="stylesheet"/>
</head>
<body>
<div class="container py-5">
  <h1 class="h3 mb-4">Registrar negocio</h1>

  {% if error %}
    <div class="alert alert-danger">{{ error }}</div>
  {% endif %}

  <form method="POST" action="{{ url_for('register') }}">
    <div class="mb-3">
      <label class="form-label">Nombre</label>
      <input name="name" class="form-control" value="{{ form.name if form else '' }}" required>
    </div>
    <div class="mb-3">
      <label class="form-label">Descripción</label>
      <textarea name="description" class="form-control" rows="4" required>{{ form.description if form else '' }}</textarea>
    </div>
    <div class="mb-3">
      <label class="form-label">Logo (URL)</label>
      <input name="logo" class="form-control" value="{{ form.logo if form else '' }}">
    </div>
    <div class="mb-3">
      <label class="form-label">Ubicación</label>
      <input name="location" class="form-control" value="Santa Cruz, Bolivia" readonly>
    </div>

    <div class="d-flex gap-2">
      <button type="submit" class="btn btn-primary">Crear Cuenta</button>
      <a href="{{ url_for('home') }}" class="btn btn-outline-secondary">Volver al Menú Principal</a>
    </div>
  </form>
</div>

<!-- Chatbot -->
<button id="chatbot-toggle" class="chatbot-btn">💬</button>
<div id="chatbot-panel" class="chatbot-panel">
  <div class="chatbot-header">Comuni IA — Chat</div>
  <div id="chatbot-messages" class="chatbot-messages"></div>
  <div class="chatbot-input">
    <input id="chatbot-text" type="text" class="form-control" placeholder="Escribe tu pregunta..."/>
    <button id="chatbot-send" class="btn btn-primary">Enviar</button>
  </div>
</div>
<script src="{{ url_for('static', filename='js/chatbot.js') }}"></script>
</body>
</html>

static:
css:
styles.css:
/* ================================
   ESTILO GENERAL - COMUNI IA
   ================================ */

body {
  font-family: 'Poppins', sans-serif;
  background-color: #F7F7F7;
  color: #333333;
  margin: 0;
  padding: 0;
}

/* ----------------------------
   NAVBAR
---------------------------- */
.navbar {
  background-color: #A8E6CF;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.navbar-brand {
  font-weight: bold;
  color: #1E7C54 !important;
}

.nav-link {
  color: #1E7C54 !important;
  font-weight: 500;
  transition: color 0.3s ease;
}

.nav-link:hover {
  color: #379457 !important;
  font-weight: 600;
}

/* ----------------------------
   HERO SECTION
---------------------------- */
.hero {
  background: linear-gradient(to right, rgba(168,230,207,0.95), rgba(255,255,255,0.95)),
              url('/static/images/hero-bg.jpg') center/cover no-repeat;
  padding: 120px 20px;
  text-align: center;
  border-radius: 0 0 30px 30px;
  box-shadow: 0 5px 20px rgba(0,0,0,0.1);
}

.hero h1 {
  font-size: 2.8rem;
  color: #1E7C54;
  font-weight: 700;
  margin-bottom: 15px;
}

.hero p {
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 25px;
}

.hero .btn-primary {
  background-color: #56B870;
  border: none;
  border-radius: 25px;
  padding: 12px 30px;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.hero .btn-primary:hover {
  background-color: #379457;
  transform: scale(1.05);
}

/* ----------------------------
   SECCIÓN DE CARDS
---------------------------- */
.card {
  border: none;
  border-radius: 20px;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.card:hover {
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
  transform: translateY(-5px);
}

.card img {
  height: 200px;
  object-fit: cover;
}

.card-body {
  text-align: center;
}

.card-title {
  color: #1E7C54;
  font-weight: 600;
}

.btn-outline-success {
  color: #1E7C54;
  border-color: #1E7C54;
  border-radius: 25px;
  transition: all 0.3s ease;
}

.btn-outline-success:hover {
  background-color: #1E7C54;
  color: white;
}

/* ----------------------------
   FORMULARIOS (REGISTER.HTML)
---------------------------- */
form {
  background: white;
  border-radius: 20px;
  padding: 30px;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

form .btn-primary {
  background-color: #56B870;
  border: none;
  border-radius: 25px;
  padding: 10px 25px;
  font-size: 1rem;
}

form .btn-primary:hover {
  background-color: #379457;
}

/* ----------------------------
   PERFIL DE NEGOCIO (PROFILE.HTML)
---------------------------- */
.profile-header {
  text-align: center;
  margin-bottom: 40px;
}

.profile-header img {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  margin-bottom: 15px;
}

.profile-header h2 {
  color: #1E7C54;
  font-weight: 600;
}

.profile-header p {
  color: #555;
}

.gallery img {
  border-radius: 10px;
  transition: transform 0.3s ease;
}

.gallery img:hover {
  transform: scale(1.05);
}

/* ----------------------------
   FOOTER
---------------------------- */
footer {
  background-color: #A8E6CF;
  color: #1E7C54;
  text-align: center;
  padding: 25px 10px;
  margin-top: 50px;
}

footer a {
  color: #1E7C54;
  margin: 0 10px;
  transition: color 0.3s ease;
}

footer a:hover {
  color: #379457;
}

/* ----------------------------
   CHATBOT FLOTANTE
---------------------------- */
.chatbot-button {
  position: fixed;
  bottom: 25px;
  right: 25px;
  background-color: #56B870;
  color: white;
  border: none;
  border-radius: 50%;
  width: 60px;
  height: 60px;
  font-size: 26px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  cursor: pointer;
  z-index: 1000;
  transition: all 0.3s ease;
}

.chatbot-button:hover {
  background-color: #379457;
  transform: scale(1.1);
}

.chatbot-window {
  position: fixed;
  bottom: 100px;
  right: 25px;
  width: 340px;
  height: 420px;
  background-color: white;
  border-radius: 15px;
  box-shadow: 0 4px 25px rgba(0, 0, 0, 0.2);
  display: none;
  flex-direction: column;
  overflow: hidden;
  z-index: 1000;
}

.chatbot-header {
  background-color: #A8E6CF;
  color: #1E7C54;
  padding: 10px;
  text-align: center;
  font-weight: 600;
  border-bottom: 1px solid #ddd;
}

.chatbot-body {
  flex: 1;
  padding: 10px;
  overflow-y: auto;
  background-color: #F7F7F7;
}

.chatbot-message {
  margin: 10px 0;
  padding: 8px 12px;
  border-radius: 10px;
  max-width: 80%;
  font-size: 0.9rem;
}

.chatbot-message.user {
  background-color: #DCF8C6;
  align-self: flex-end;
}

.chatbot-message.bot {
  background-color: #E6E6E6;
  align-self: flex-start;
}

.chatbot-footer {
  display: flex;
  border-top: 1px solid #ddd;
}

.chatbot-footer input {
  flex: 1;
  border: none;
  padding: 10px;
  border-radius: 0 0 0 10px;
  outline: none;
}

.chatbot-footer button {
  background-color: #56B870;
  border: none;
  color: white;
  padding: 10px 20px;
  border-radius: 0 0 10px 0;
  cursor: pointer;
  transition: all 0.3s ease;
}

.chatbot-footer button:hover {
  background-color: #379457;
}

.chatbot-btn{
  position: fixed; right: 20px; bottom: 20px;
  width:56px;height:56px;border-radius:50%;
  border:none; background:#0d6efd; color:#fff; font-size:20px;
  display:flex; align-items:center; justify-content:center;
  box-shadow:0 6px 20px rgba(0,0,0,.2); z-index: 9999;
}
.chatbot-panel{
  position: fixed; right: 20px; bottom: 90px; width: 320px; height: 420px;
  background:#fff; border:1px solid #e5e5e5; border-radius:12px; display:none; flex-direction:column; z-index: 9999;
  box-shadow:0 8px 30px rgba(0,0,0,.15);
}
.chatbot-header{
  padding:10px 12px; border-bottom:1px solid #eee; font-weight:600;
}
.chatbot-messages{
  flex:1; padding:10px; overflow:auto; font-size:14px;
}
.chatbot-input{ display:flex; gap:6px; padding:10px; border-top:1px solid #eee; }
.msg-user{ background:#e7f1ff; padding:8px 10px; border-radius:10px; margin-bottom:8px; }
.msg-bot{ background:#f8f9fa; padding:8px 10px; border-radius:10px; margin-bottom:8px; }

js:
chatbot.js:
(function(){
  const btn = document.getElementById('chatbot-toggle');
  const panel = document.getElementById('chatbot-panel');
  const msgs = document.getElementById('chatbot-messages');
  const input = document.getElementById('chatbot-text');
  const send = document.getElementById('chatbot-send');

  if(!btn || !panel) return;

  btn.addEventListener('click', ()=> {
    panel.style.display = (panel.style.display === 'flex') ? 'none' : 'flex';
    if(panel.style.display === 'flex') input?.focus();
  });

  const pushMsg = (text, who='bot') => {
    const div = document.createElement('div');
    div.className = (who==='user') ? 'msg-user' : 'msg-bot';
    div.textContent = text;
    msgs.appendChild(div);
    msgs.scrollTop = msgs.scrollHeight;
  };

  const ask = async () => {
    const text = (input.value||'').trim();
    if(!text) return;
    pushMsg(text,'user');
    input.value = '';
    pushMsg('Pensando…','bot');
    try{
      const resp = await fetch('/api/chat', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({message: text})
      });
      const data = await resp.json();
      msgs.lastChild.textContent = data.reply || data.error || 'Sin respuesta.';
    }catch(e){
      msgs.lastChild.textContent = 'Error de red.';
    }
  };

  send?.addEventListener('click', ask);
  input?.addEventListener('keydown', (e)=>{ if(e.key==='Enter') ask(); });
})();
